#!/usr/bin/env ruby

#-----------------------------------------------------------------------------------------------------------
# supported forms of email to list:
# 
# current members: 
#					1234.members@grpbldr.com
#					1234@grpbldr.com
#					<unique club handle>.members@grpbldr.com (ex:  speakeasy.members@grpbldr.com)
#					<unique club name>@grpbldr.com  (ex: speakeasy@grpbldr.com )
#
# current leaders:
#					1234.leaders@grpbldr.com
#					<unique club name>.leaders@grpbldr.com (ex: speakeasy.leaders@grpbldr.com)
#
# custom list:		1234.<list name>@grpbldr.com
# 					<unique clubname>.<list name>@grpbldr.com (ex: speakeasy.contestcommittee@grpbldr.com)			#
#-----------------------------------------------------------------------------------------------------------	


require 'rubygems'
require 'bundler/setup'
require 'mailman'
require 'action_view'

require "#{ENV['GB_RAILS_ROOT']}/lib/custom/string_helper.rb"
require "#{ENV['GB_RAILS_ROOT']}/lib/custom/mailing_lists.rb"
require "#{ENV['GB_RAILS_ROOT']}/lib/custom/system_services.rb"





#-----------------------------------------------------------------------------------------------------------
#  This class represents a recipient list for the new email created from the read email
#-----------------------------------------------------------------------------------------------------------


class RecipientList

	attr_accessor   :recipient_list
	
	def initialize(message)
		@message = message
		@recipient_list = expand_recipient_list(message.to)
	end

	def is_valid?
		#
		!@recipient_list.nil?
	end

	def expand_recipient_list(original_recipient)

		tokens = parse_recipient_into_tokens original_recipient
		
		return nil if tokens.length > 2 || tokens.length == 0

		mailing_list = MailingLists.new 
	    
		club = club_from_email_name(tokens[0]) 

		if tokens.length == 2 
			return nil if club.nil?
			club_list_name = tokens[1]
			
			if (club_list_name == 'members')
	  		dist_list = mailing_list.active_members(club.id) 
	  	else
	  		dist_list = 'joe.meirow@gmail.com'
	  	end

	  else # length == 1
			dist_list = mailing_list.active_members(club.id)  
		end

		dist_list
	end

	def invalid_token_count? tokens
		return true if token.is_a Array && ( tokens.length > 2 || tokens.length == 0)
		false
	end

	def parse_recipient_into_tokens original_recipient
		original_recipient = original_recipient.to_s
		original_recipient.gsub!(/"/,'').gsub!(/\[/,'').gsub!(/\]/,'')

		tokens = original_recipient.split("@")
		tokens[0].split(".")
	end

	def club_from_email_name(email_name)
		 
		if StringHelper.is_integer? email_name
			return Club.where("id = ?",email_name).first 
		else
			return Club.where("lower(email_name) = ?", email_name.downcase).first
		end
	end

end

class MailHTMLWrapper
	def initialize(body)
		@body = body
	end
	def html
		@body
	end
end



#-----------------------------------------------------------------------------------------------------------
#  Mailman configurations
#-----------------------------------------------------------------------------------------------------------

Mailman.config.rails_root = ENV['GB_RAILS_ROOT']
Mailman.config.poll_interval = 5
Mailman.config.logger = Logger.new("#{ENV['GB_RAILS_ROOT']}/log/mailman.log")
Mailman.config.pop3 = {
  server: 	ENV['GB_RELAY_POP_SERVER'], port: 995, ssl: true,
  username: ENV['GB_RELAY_POP_USERNAME'],
  password: ENV['GB_RELAY_POP_PASSWORD']
}


#-----------------------------------------------------------------------------------------------------------
#  This is where the "service" begins
#-----------------------------------------------------------------------------------------------------------


include SystemServices
include ActionView::Helpers::TagHelper

Mailman::Application.run do
  default do
  	begin 
	 		recipient_list = RecipientList.new(message)
	    email = Email.new
	    email.subject = message.subject
	    email.to = recipient_list.recipient_list
	    email.from = message.from.first
	    email.body = message.text_part.body
	    email.save
	    relay_email(email.id, message) if recipient_list.is_valid?
	 	rescue Exception => e
	  	Mailman.logger.error "Exception occurred while receiving message:\n#{message}"
	    Mailman.logger.error [e, *e.backtrace].join("\n")
	  end
  end
end
